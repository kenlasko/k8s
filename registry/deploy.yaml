---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-registry
  namespace: registry
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: registry
  template:
    metadata:
      labels:
        app: registry
        name: registry
    spec:
      restartPolicy: Always
      automountServiceAccountToken: false
      priorityClassName: low-priority
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: DoesNotExist
              - key: kubernetes.io/arch
                operator: In
                values: 
                - "amd64"
      containers:
      - name: registry
        image: docker.io/registry:2.8.3
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 100
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop: ["ALL"]
        ports:
        - containerPort: 5000
        resources:
          requests:
            cpu: 1m
            memory: 25Mi
          limits:
            # cpu: 350m
            memory: 600Mi
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 60
        env:
        - name: REGISTRY_HTTP_ADDR
          value: "0.0.0.0:5000"
        - name: TZ
          value: "America/Toronto"
        volumeMounts:
        - name: nfs-registry
          mountPath: /var/lib/registry
          subPath: registry
      volumes:
      - name: nfs-registry
        persistentVolumeClaim:
          claimName: nfs-registry