---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: pgdump
  namespace: cnpg
spec:
  schedule: "30 5 * * *"  # Start at 1:30am every day
  suspend: false
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          dnsPolicy: ClusterFirstWithHostNet
          automountServiceAccountToken: false
          containers:
          - name: pgdump
            image: ghcr.io/tensorchord/cloudnative-vectorchord:16.9-0.3.0
            imagePullPolicy: IfNotPresent
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              runAsNonRoot: true
              runAsUser: 26
              runAsGroup: 26
              seccompProfile:
                type: RuntimeDefault
              capabilities:
                drop: ["ALL"]
            resources:
              requests:
                cpu: 350m
                memory: 700Mi
              limits:
                # cpu: 400m
               # memory: 800Mi
            env: 
            - name: PGUSER
              valueFrom: 
                secretKeyRef: 
                  name: postgresql-superuser
                  key: username
            - name: PGPASSWORD
              valueFrom: 
                secretKeyRef: 
                  name: postgresql-superuser
                  key: password
            - name: PGHOST
              value: home-rw
            command: 
            - /bin/sh
            - -c
            - DAY=$(date +%A) &&
              DATE=$(date +%F) &&
              BACKUP_ROOT="/backup/" &&
              BACKUP_DIR="$BACKUP_ROOT/$DAY" &&
              sleep 9999999 &&
              ARCHIVE_FILE="$BACKUP_ROOT/postgres_backup_${DAY}.tar.gz"
              mkdir -p "$BACKUP_DIR" && 
              echo "$(date +%F_%T) Backing up global objects..." &&
              pg_dumpall --globals-only -f "$BACKUP_DIR/globals.sql" &&
              echo "$(date +%F_%T) Globals saved to $BACKUP_DIR/globals.sql" &&
              DBS=$(psql -At -c "SELECT datname FROM pg_database WHERE datistemplate = false;") &&
              for DB in $DBS; do 
                  echo "Dumping database $DB ...";
                  pg_dump -Fc -f "$BACKUP_DIR/${DB}.dump" "$DB";
              done &&
              echo "Compressing all dumps into $ARCHIVE_FILE ..." &&
              tar -czf "$ARCHIVE_FILE" -C "$BACKUP_DIR" . &&
              rm -rf $BACKUP_DIR &&
              echo "$(date +%F_%T) All databases have been backed up."
            volumeMounts:
            - name: data
              mountPath: /backup
            # - name: zipdata
            #   mountPath: /backup-zip
          restartPolicy: Never #OnFailure
          volumes:
          - name: data
            persistentVolumeClaim:
              claimName: nfs-cnpg-backup
          # - name: zipdata
          #   persistentVolumeClaim:
          #     claimName: nfs-mariadb-zip-backup
