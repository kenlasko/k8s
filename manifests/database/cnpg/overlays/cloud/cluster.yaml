apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: cloud
  namespace: cnpg
spec:
  imageName: ghcr.io/tensorchord/cloudnative-vectorchord:16.9-0.3.0
  instances: 1
  bootstrap:
    # Bootstrapping directly from the primary is extremely slow over Tailscale and takes over 10h. Not recommended
    # After the initial sync, the ongoing replication seems to fail on missing WALs, even though they are supposedly
    # never deleted from the primary. Better to use the Backblaze S3 'home-cluster-backupsource'
    # pg_basebackup:
    #   source: home-postgresql
    recovery:
      source: home-cluster-backupsource
  # The ongoing replication from the primary seems to work fine over Tailscale.
  # For initial replica sync, using the S3 source (home-cluster-backupsource) is much faster, but should switch
  # to the primary (home-postgresql) for ongoing replication. Otherwise, CNPG seems to continuously search for WALs that haven't
  # been archived to S3 yet. This causes high CPU load on the secondary, and probably incurs additional S3 costs as it continually
  # hits the S3 API.
  replica:
    enabled: true
    source: home-postgresql   # home-postgresql  home-cluster-backupsource
  storage:
    storageClass: local-storage
    size: 15Gi

  # # This should be uncommented if you ever need to use this cluster to restore the primary
  # # cluster. It will backup to Backblaze S3 storage, which can then be used by the primary 
  # # cluster to restore (in theory).
  # plugins:
  # - name: barman-cloud.cloudnative-pg.io
  #   enabled: true
  #   isWALArchiver: true
  #   parameters:
  #     barmanObjectName: backblaze

  enableSuperuserAccess: true
  superuserSecret:
    name: postgresql-superuser
  certificates:
    serverAltDNSNames:
    - "home-postgresql.tailb7050.ts.net"
    - "home-postgresql"
    - "home-cnpg.svc.cluster.local"
  managed:
    services:
      additional:
      - selectorType: rw
        updateStrategy: patch
        serviceTemplate:
          metadata:
            name: "postgresql-service"
            annotations:
              tailscale.com/expose: "true"
              tailscale.com/hostname: "cloud-postgresql"
          spec:
            type: ClusterIP

  # Defines the connection parameters for the external clusters referenced in the
  # bootstrap and replica sections above.
  externalClusters:
  # This is the Backblaze S3 backup source from the home cluster
  - name: home-cluster-backupsource
    plugin:
      name: barman-cloud.cloudnative-pg.io
      enabled: true
      isWALArchiver: false
      parameters:
        barmanObjectName: backblaze
        serverName: home
  # This is the primary PostgreSQL cluster at home, accessed over Tailscale
  - name: home-postgresql
    connectionParameters:
      host: home-postgresql
      user: streaming_replica
      sslmode: verify-full
      dbname: postgres
    sslKey:
      name: replication-certs
      key: tls.key
    sslCert:
      name: replication-certs
      key: tls.crt
    sslRootCert:
      name: replication-certs
      key: ca.crt