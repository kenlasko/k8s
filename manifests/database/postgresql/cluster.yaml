apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: home
  namespace: postgresql
spec:
  imageName: registry.ucdialplans.com/postgres:16-3.0  # ghcr.io/tensorchord/cloudnative-pgvecto.rs:16.5-v0.3.0  # registry.ucdialplans.com/postgres:16-3.5  
  instances: 3
  failoverDelay: 15
  storage:
    storageClass: local-path
    size: 15Gi
  enableSuperuserAccess: true
  superuserSecret:
    name: postgresql-superuser
  certificates:
    serverAltDNSNames:
    - "home-postgresql.tailb7050.ts.net"
    - "home-postgresql"
    - "home-postgresql.svc.cluster.local"
  # bootstrap:
    # pg_basebackup:
    #   source: postgresql-cloud-postgresql-egress
    # initdb:
    #   postInitSQL:
    #     - ALTER SYSTEM SET search_path TO "$user", public, vectors;
    #     - CREATE EXTENSION IF NOT EXISTS "vectors";

    # If the namespace still exists and there is a backup object, we can just restore using the below method:
    # recovery:
    #   backup:
    #     name: daily-20250514170109

  # If the namespace is brand-new, we restore using the 'externalClusters' method:
    # recovery:
    #   source: clusterBackup
      # recoveryTarget:
      #   targetTime: "2025-05-14 16:57:06.538776+00:00"
  # externalClusters:
  # - name: clusterBackup
  #   barmanObjectStore:
  #     serverName: postgres
  #     destinationPath: "s3://postgresql"
  #     endpointURL: "https://fa831d805d821b7c4627b464a9845a9d.r2.cloudflarestorage.com"
  #     wal:
  #       compression: gzip
  #       maxParallel: 6
  #     s3Credentials:
  #       accessKeyId:
  #         name: cloudflare-s3-backup-postgresql
  #         key: AWS_ACCESS_KEY_ID
  #       secretAccessKey:
  #         name: cloudflare-s3-backup-postgresql
  #         key: AWS_SECRET_ACCESS_KEY

  postgresql:
    shared_preload_libraries:
    - "vectors.so"

  # Cloudflare R2 backup target
  backup:
    retentionPolicy: "2d"
    barmanObjectStore:
      endpointURL: "https://fa831d805d821b7c4627b464a9845a9d.r2.cloudflarestorage.com/"
      destinationPath: "s3://postgresql"
      wal:
        compression: gzip
        maxParallel: 4
      data:
        compression: gzip
      s3Credentials:
        accessKeyId:
          name: cloudflare-s3-backup-postgresql
          key: AWS_ACCESS_KEY_ID
        secretAccessKey:
          name: cloudflare-s3-backup-postgresql
          key: AWS_SECRET_ACCESS_KEY

  # Oracle Cloud backup target
  # backup:
  #   retentionPolicy: "2d"
  #   barmanObjectStore:
  #     endpointURL: "https://yzimm6ocyme1.compat.objectstorage.ca-toronto-1.oraclecloud.com/"
  #     destinationPath: "s3://postgresql"
  #     wal:
  #       compression: gzip
  #       maxParallel: 4
  #     data:
  #       compression: gzip
  #     s3Credentials:
  #       accessKeyId:
  #         name: oracle-s3-backup-postgresql
  #         key: AWS_ACCESS_KEY_ID
  #       secretAccessKey:
  #         name: oracle-s3-backup-postgresql
  #         key: AWS_SECRET_ACCESS_KEY

  # NAS01 backup target
  # backup:
  #   retentionPolicy: "7d"
  #   barmanObjectStore:
  #     endpointURL: "http://nas01.ucdialplans.com:8010"
  #     destinationPath: "s3://postgresql"
  #     wal:
  #       compression: gzip
  #       maxParallel: 4
  #     data:
  #       compression: gzip
  #     s3Credentials:
  #       accessKeyId:
  #         name: nas01-s3-backup-postgresql
  #         key: AWS_ACCESS_KEY_ID
  #       secretAccessKey:
  #         name: nas01-s3-backup-postgresql
  #         key: AWS_SECRET_ACCESS_KEY
  managed:
    roles:
    - name: dawarich
      ensure: present
      login: true
      superuser: false
      inherit: false
      connectionLimit: -1
      passwordSecret:
        name: useraccount-dawarich
    - name: immich
      ensure: present
      login: true
      superuser: false
      inherit: false
      connectionLimit: -1
      passwordSecret:
        name: useraccount-immich
    - name: prowlarr
      ensure: present
      login: true
      superuser: false
      inherit: false
      connectionLimit: -1
      passwordSecret:
        name: useraccount-prowlarr
    - name: radarr
      ensure: present
      login: true
      superuser: false
      inherit: false
      connectionLimit: -1
      passwordSecret:
        name: useraccount-radarr
    - name: sonarr
      ensure: present
      login: true
      superuser: false
      inherit: false
      connectionLimit: -1
      passwordSecret:
        name: useraccount-sonarr

    services:
      additional:
      - selectorType: rw
        updateStrategy: patch
        serviceTemplate:
          metadata:
            name: "postgresql-service"
            labels:
              tailscale.com/proxy-class: "run-on-worker"
            annotations:
              #lbipam.cilium.io/ips: 192.168.1.15
              tailscale.com/expose: "true"
              tailscale.com/hostname: "home-postgresql"
          spec:
            type: LoadBalancer
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: node-role.kubernetes.io/control-plane
            operator: DoesNotExist
          - key: kubernetes.io/arch
            operator: In
            values: 
            - "amd64"