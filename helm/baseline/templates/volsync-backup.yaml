{{- if .Values.backup | default false}}
---
apiVersion: volsync.backube/v1alpha1
kind: ReplicationSource
metadata:
  name: {{ .Values.nameOverride | default .Release.Name }}
spec:
  # The PVC to be backed up
  sourcePVC: {{ if .Values.backup.claimName }}{{ .Values.backup.claimName }}{{ else }}nfs-{{ coalesce .Values.nameOverride .Release.Name }}{{ end }}
  trigger:
    schedule: {{ .Values.backup.schedule | default "0 5 * * *" | quote }}
  restic:
    # Prune the repository (repack to free space) every week
    pruneIntervalDays: 7
    # Name of the Secret with the connection information
    repository: s3-backup-{{ .Values.backup.location | default "nas01" }}-{{ .Values.nameOverride | default .Release.Name }}
    # Retention policy for backups
    retain:
    {{- if .Values.backup.retentionPolicy }}
    {{- toYaml .Values.backup.retentionPolicy | nindent 6 }}
    {{- else }}
      hourly: 0
      daily: 7
      weekly: 2
      monthly: 0
      yearly: 0
    {{- end }}
    # Clone the source volume prior to taking a backup to ensure a
    # point-in-time image.
    copyMethod: {{ .Values.backup.copyMethod | default "Clone" }}
    cacheCapacity: 5Gi
    # The VSC to use if the copy method is Snapshot (default if omitted)
    volumeSnapshotClassName: nfs
    # The StorageClass to use when creating the PiT copy (same as source PVC if omitted)
    storageClassName: nfs-csi-dynamic
    {{- if .Values.securityContext }}
    moverSecurityContext:
      runAsNonRoot: {{ .Values.securityContext.runAsNonRoot | default false }}
      runAsUser: {{ if hasKey .Values.securityContext "runAsUser" }}{{ .Values.securityContext.runAsUser }}{{ else }}1000{{ end }}
      runAsGroup: {{ if hasKey .Values.securityContext "runAsGroup" }}{{ .Values.securityContext.runAsGroup }}{{ else }}100{{ end }}
      seccompProfile:
        type: RuntimeDefault
    {{- end }}
    moverAffinity:
      {{- if .Values.affinity }}
      {{- toYaml .Values.affinity | nindent 6 }}
      {{- else }}
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: node-role.kubernetes.io/control-plane
              operator: DoesNotExist
            - key: kubernetes.io/arch
              operator: In
              values:
              - "amd64"
      {{- end }}
{{ end }}