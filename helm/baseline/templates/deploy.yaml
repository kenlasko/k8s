---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/version: {{ .Values.image.tag }}
spec:
  serviceName: {{ .Release.Name }}
  replicas: 1
  revisionHistoryLimit: 2
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        app.kubernetes.io/name: {{ .Release.Name }}
        app.kubernetes.io/version: {{ .Values.image.tag }}
        appGroup: media-arr
    spec:
      dnsPolicy: ClusterFirstWithHostNet
      restartPolicy: Always
      automountServiceAccountToken: false
      priorityClassName: medium-priority
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: DoesNotExist
              - key: kubernetes.io/arch
                operator: In
                values: 
                - "amd64"
      containers:
      - name: {{ .Release.Name }}
        image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: IfNotPresent
        {{- if .Values.securityContext }} # Conditional inclusion of securityContext
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        {{- end }}
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "100"
        - name: TZ
          value: "America/Toronto"
        resources:
          {{- if .Values.resources.requests }}
          requests:
            {{- if .Values.resources.requests.cpu }}
            cpu: {{ .Values.resources.requests.cpu }}
            {{- end }}
            {{- if .Values.resources.requests.memory }}
            memory: {{ .Values.resources.requests.memory }}
            {{- end }}
          {{- end }}
          {{- if .Values.resources.limits }}
          limits:
            {{- if .Values.resources.limits.cpu }}
            cpu: {{ .Values.resources.limits.cpu }}
            {{- end }}
            {{- if .Values.resources.limits.memory }}
            memory: {{ .Values.resources.limits.memory }}
            {{- end }}
          {{- end }}
        ports:
        - containerPort: {{ .Values.service.port }}
          name: http
          protocol: TCP
        {{- range .Values.service.extraPorts }}
        - containerPort: {{ .port }}
          name: {{ .name }}
          protocol: {{ .protocol | default "TCP" }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 15
          periodSeconds: 60
          timeoutSeconds: 5
        volumeMounts:
        - name: {{ .Release.Name }}-config
          mountPath: {{ .Values.persistentVolume.mountPath | default "/config" }}
      {{- if .Values.media }}    
        {{- if .Values.media.enabled | default false}}
        - name: media
          mountPath: /media
        {{- end }}
      {{- end }}
        {{- range .Values.extraVolumeMounts }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          {{- if .subPath }}
          subPath: {{ .subPath }}
          {{- end }}
        {{- end }}
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      volumes:
      - name: {{ .Release.Name }}-config
        persistentVolumeClaim:
          claimName: longhorn-{{ .Release.Name }}-config-pvc
    {{- if .Values.media }} 
      {{- if .Values.media.enabled | default false }}
      - name: media
        persistentVolumeClaim:
          claimName: {{ .Values.media.claimName | default "nfs-media" }}
      {{- end }}
    {{- end }}
      {{- range .Values.extraVolumes }}
      - name: {{ .name }}
        {{- if .persistentVolumeClaim }}
        persistentVolumeClaim:
          claimName: {{ .persistentVolumeClaim }}
        {{- else if .hostPath }}
        hostPath:
          path: {{ .hostPath }}
          type: {{ .hostPathType | default "Directory" }}
        {{- else if .emptyDir }}
        emptyDir: {}
        {{- end }}
      {{- end }}